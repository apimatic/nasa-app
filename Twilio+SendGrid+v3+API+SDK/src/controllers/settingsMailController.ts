/**
 * Twilio SendGrid v3 APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  TraitMakoErrorResponse400Error,
} from '../errors/traitMakoErrorResponse400Error';
import {
  MailSettingsAddressWhitelabel,
  mailSettingsAddressWhitelabelSchema,
} from '../models/mailSettingsAddressWhitelabel';
import {
  MailSettingsForwardBounce,
  mailSettingsForwardBounceSchema,
} from '../models/mailSettingsForwardBounce';
import {
  MailSettingsForwardSpam,
  mailSettingsForwardSpamSchema,
} from '../models/mailSettingsForwardSpam';
import {
  V3MailSettingsAddressWhitelistRequest,
  v3MailSettingsAddressWhitelistRequestSchema,
} from '../models/v3MailSettingsAddressWhitelistRequest';
import {
  V3MailSettingsResponse,
  v3MailSettingsResponseSchema,
} from '../models/v3MailSettingsResponse';
import { number, optional, string } from '../schema';
import { BaseController } from './baseController';

export class SettingsMailController extends BaseController {
  /**
   * **This endpoint allows you to retrieve a list of all mail settings.**
   *
   * Each setting will be returned with an `enabled` status set to `true` or `false` and a short
   * description that explains what the setting does.
   *
   * @param limit        The number of settings to return.
   * @param offset       Where in the list of results to begin displaying settings.
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETMailSettings(
    limit?: number,
    offset?: number,
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3MailSettingsResponse>> {
    const req = this.createRequest('GET', '/v3/mail_settings');
    const mapped = req.prepareArgs({
      limit: [limit, optional(number())],
      offset: [offset, optional(number())],
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.query('limit', mapped.limit);
    req.query('offset', mapped.offset);
    req.throwOn(400, TraitMakoErrorResponse400Error, '');
    req.throwOn(401, TraitMakoErrorResponse400Error, '');
    req.throwOn(403, TraitMakoErrorResponse400Error, '');
    req.throwOn(404, TraitMakoErrorResponse400Error, '');
    req.throwOn(500, TraitMakoErrorResponse400Error, '');
    return req.callAsJson(v3MailSettingsResponseSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to update your current email address whitelist settings.**
   *
   * You can select whether or not this setting should be enabled by assigning the `enabled` field a
   * `true` or `false` value.
   *
   * Passing only the `enabled` field to this endpoint will not alter your current `list` of whitelist
   * entries. However, any modifications to your `list` of entries will overwrite the entire list. For
   * this reason, you must included all existing entries you wish to retain in your `list` in addition to
   * any new entries you intend to add. To remove one or more `list` entries, pass a `list` with only the
   * entries you wish to retain.
   *
   * You should not add generic domains such as `gmail.com` or `yahoo.com`  in your `list` because your
   * emails will not honor recipients' unsubscribes. This may cause a legal violation of [CAN-SPAM](https:
   * //sendgrid.com/docs/glossary/can-spam/) and could damage your sending reputation.
   *
   * The Address Whitelist setting allows you to specify email addresses or domains for which mail should
   * never be suppressed.
   *
   * For example, if you own the domain `example.com`, and one or more of your recipients use
   * `email@example.com` addresses, placing `example.com` in the address whitelist setting instructs
   * Twilio SendGrid to ignore all bounces, blocks, and unsubscribes logged for that domain. In other
   * words, all bounces, blocks, and unsubscribes will still be sent to `example.com` as if they were
   * sent under normal sending conditions.
   *
   * @param onBehalfOf   Example: The subuser's username. This header
   *                                                                     generates the API call as if the subuser
   *                                                                     account was making the call.
   * @param body
   * @return Response from the API call
   */
  async pATCHMailSettingsAddressWhitelist(
    onBehalfOf?: string,
    body?: V3MailSettingsAddressWhitelistRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MailSettingsAddressWhitelabel>> {
    const req = this.createRequest(
      'PATCH',
      '/v3/mail_settings/address_whitelist'
    );
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
      body: [body, optional(v3MailSettingsAddressWhitelistRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.json(mapped.body);
    req.throwOn(400, TraitMakoErrorResponse400Error, '');
    req.throwOn(401, TraitMakoErrorResponse400Error, '');
    req.throwOn(403, TraitMakoErrorResponse400Error, '');
    req.throwOn(404, TraitMakoErrorResponse400Error, '');
    req.throwOn(500, TraitMakoErrorResponse400Error, '');
    return req.callAsJson(mailSettingsAddressWhitelabelSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve your current email address whitelist settings.**
   *
   * The Address Whitelist setting allows you to specify email addresses or domains for which mail should
   * never be suppressed.
   *
   * For example, if you own the domain `example.com`, and one or more of your recipients use
   * `email@example.com` addresses, placing `example.com` in the address whitelist setting instructs
   * Twilio SendGrid to ignore all bounces, blocks, and unsubscribes logged for that domain. In other
   * words, all bounces, blocks, and unsubscribes will still be sent to `example.com` as if they were
   * sent under normal sending conditions.
   *
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETMailSettingsAddressWhitelist(
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MailSettingsAddressWhitelabel>> {
    const req = this.createRequest(
      'GET',
      '/v3/mail_settings/address_whitelist'
    );
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.throwOn(400, TraitMakoErrorResponse400Error, '');
    req.throwOn(401, TraitMakoErrorResponse400Error, '');
    req.throwOn(403, TraitMakoErrorResponse400Error, '');
    req.throwOn(404, TraitMakoErrorResponse400Error, '');
    req.throwOn(500, TraitMakoErrorResponse400Error, '');
    return req.callAsJson(mailSettingsAddressWhitelabelSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to update your current Forward Spam mail settings.**
   *
   * Enabling the Forward Spam setting allows you to specify `email` addresses to which spam reports will
   * be forwarded. You can set multiple addresses by passing this endpoint a comma separated list of
   * emails in a single string.
   *
   * ```
   * {
   * "email": "address1@example.com, address2@exapmle.com",
   * "enabled": true
   * }
   * ```
   *
   * The Forward Spam setting may also be used to receive emails sent to `abuse@` and `postmaster@` role
   * addresses if you have authenticated your domain.
   *
   * For example, if you authenticated `example.com` as your root domain and set a custom return path of
   * `sub` for that domain, you could turn on Forward Spam, and any emails sent to `abuse@sub.example.
   * com` or `postmaster@sub.example.com` would be forwarded to the email address you entered in the
   * `email` field.
   *
   * You can authenticate your domain using the "Authenticate a domain" endpoint or in the [Sender
   * Authentication section of the Twilio SendGrid App](https://app.sendgrid.com/settings/sender_auth).
   * You can also configure the Forward Spam mail settings in the [Mail Settings section of the Twilio
   * SendGrid App](https://app.sendgrid.com/settings/mail_settings).
   *
   * @param onBehalfOf   Example: The subuser's username. This header generates the
   *                                                       API call as if the subuser account was making the call.
   * @param body
   * @return Response from the API call
   */
  async pATCHMailSettingsForwardSpam(
    onBehalfOf?: string,
    body?: MailSettingsForwardSpam,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MailSettingsForwardSpam>> {
    const req = this.createRequest('PATCH', '/v3/mail_settings/forward_spam');
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
      body: [body, optional(mailSettingsForwardSpamSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.json(mapped.body);
    req.throwOn(400, TraitMakoErrorResponse400Error, '');
    req.throwOn(401, TraitMakoErrorResponse400Error, '');
    req.throwOn(403, TraitMakoErrorResponse400Error, '');
    req.throwOn(404, TraitMakoErrorResponse400Error, '');
    req.throwOn(500, TraitMakoErrorResponse400Error, '');
    return req.callAsJson(mailSettingsForwardSpamSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve your current Forward Spam mail settings.**
   *
   * Enabling the Forward Spam setting allows you to specify `email` addresses to which spam reports will
   * be forwarded. This endpoint returns any email address(es) you have set to receive forwarded spam and
   * an `enabled` status indicating if the setting is active.
   *
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETMailSettingsForwardSpam(
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MailSettingsForwardSpam>> {
    const req = this.createRequest('GET', '/v3/mail_settings/forward_spam');
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.throwOn(400, TraitMakoErrorResponse400Error, '');
    req.throwOn(401, TraitMakoErrorResponse400Error, '');
    req.throwOn(403, TraitMakoErrorResponse400Error, '');
    req.throwOn(404, TraitMakoErrorResponse400Error, '');
    req.throwOn(500, TraitMakoErrorResponse400Error, '');
    return req.callAsJson(mailSettingsForwardSpamSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to update your current bounce forwarding mail settings.**
   *
   * Enabling the Forward Bounce setting allows you to specify an `email` address to which bounce reports
   * will be forwarded.
   *
   * You can also configure the Forward Spam mail settings in the [Mail Settings section of the Twilio
   * SendGrid App](https://app.sendgrid.com/settings/mail_settings).
   *
   * @param onBehalfOf   Example: The subuser's username. This header generates
   *                                                         the API call as if the subuser account was making the call.
   * @param body
   * @return Response from the API call
   */
  async pATCHMailSettingsForwardBounce(
    onBehalfOf?: string,
    body?: MailSettingsForwardBounce,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MailSettingsForwardBounce>> {
    const req = this.createRequest('PATCH', '/v3/mail_settings/forward_bounce');
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
      body: [body, optional(mailSettingsForwardBounceSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.json(mapped.body);
    req.throwOn(400, TraitMakoErrorResponse400Error, '');
    req.throwOn(401, TraitMakoErrorResponse400Error, '');
    req.throwOn(403, TraitMakoErrorResponse400Error, '');
    req.throwOn(404, TraitMakoErrorResponse400Error, '');
    req.throwOn(500, TraitMakoErrorResponse400Error, '');
    return req.callAsJson(mailSettingsForwardBounceSchema, requestOptions);
  }

  /**
   * **This endpoint allows you to retrieve your current bounce forwarding mail settings.**
   *
   * Enabling the Forward Bounce setting allows you to specify `email` addresses to which bounce reports
   * will be forwarded. This endpoint returns the email address you have set to receive forwarded bounces
   * and an `enabled` status indicating if the setting is active.
   *
   * @param onBehalfOf   Example: The subuser's username. This header generates the API call as if the
   *                               subuser account was making the call.
   * @return Response from the API call
   */
  async gETMailSettingsForwardBounce(
    onBehalfOf?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MailSettingsForwardBounce>> {
    const req = this.createRequest('GET', '/v3/mail_settings/forward_bounce');
    const mapped = req.prepareArgs({
      onBehalfOf: [onBehalfOf, optional(string())],
    });
    req.header('on-behalf-of', mapped.onBehalfOf);
    req.throwOn(400, TraitMakoErrorResponse400Error, '');
    req.throwOn(401, TraitMakoErrorResponse400Error, '');
    req.throwOn(403, TraitMakoErrorResponse400Error, '');
    req.throwOn(404, TraitMakoErrorResponse400Error, '');
    req.throwOn(500, TraitMakoErrorResponse400Error, '');
    return req.callAsJson(mailSettingsForwardBounceSchema, requestOptions);
  }
}
